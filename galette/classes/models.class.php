<?php
//
//  models.class.php, 31 octobre 2007
//
// Copyright © 2007 John Perr
//
// File :               	models.class.php
// Author's Website :   	http://galette.tuxfamily.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
/**
 * models.class.php, 31 octobre 2007
 *
 * @package Galette
 * 
 * @author     John Perr
 * @copyright  2007 John Perr
 * @license    http://www.gnu.org/licenses/old-licenses/gpl-2.0.html GPL License 2.0 or (at your option) any later version
 * @version    $Id$
 * @since      Disponible depuis la Release 0.7
 */

/** TODO
* - The above constant should be defined at higher level
* - all errors messages should be handled by pear::log
*/
set_include_path(get_include_path() . PATH_SEPARATOR . WEB_ROOT . "includes/pear/" . PATH_SEPARATOR . WEB_ROOT . "includes/pear/PEAR/" . PATH_SEPARATOR . WEB_ROOT . "includes/pear/MDB2");

require_once("MDB2.php");


/**
 * Texts class for galette
 *
 * @name Models
 * @package Galette
 *
 */

class Models {
	private $all_models;
	private $error = array();
	private $is_error = false;
	private $db;
	const MODELS = "models";
	const ADH = "adherents";
	const FIELDS = "field_types";
	const CONDITIONS = "models_conditions";

	
	function __construct(){
		$dsn = TYPE_DB.'://'.USER_DB.':'.PWD_DB.'@'.HOST_DB.'/'.NAME_DB;
		$options = array(
			'debug'       => 2,
			'portability' => MDB2_PORTABILITY_ALL);
		
		$this->db = & MDB2::connect($dsn, $options);
		// Vérification des erreurs
		self::chekError($this->db);
		$this->db->setFetchMode(MDB2_FETCHMODE_ASSOC);

	}

	function __destruct(){
		$this->db->disconnect();
	}

	/**
	* ERRORS
	* @param array: Database result array
	* @return boolean: True if database error raised
	*/
	function chekError($result){
		// Vérification des erreurs
		if (MDB2::isError($result)) {
		   $this->is_error = true;
			array_push ($this->error,$result->getDebugInfo());
			array_push ($this->error,$result->getMessage());
		}
		return $this->is_error
	}

	/**
	* GETTERS
	* @param string: Reference of text to get
	* @param string: Language texts to get
	* @return array of all text fields for one language.
	*/
	public function getModels($modid = "%"){
			$requete = "SELECT * FROM ".PREFIX_DB.self::MODELS." WHERE mod_id LIKE '".$modid."'";
			$result = $this->db->query($requete);
			// Vérification des erreurs
		   self::chekError($result);
			if(!$this->is_error && $result->numRows()>0){
				$this->all_models = $result->fetchRow(MDB2_FETCHMODE_ASSOC);
			}
	return $this->all_texts;
	}

	/**
	* SETTERS
	* @param string: Texte ref to locate
	* @param string: Texte language to locate
	* @param string: Subject to set
	* @param string: Body text to set
	* @return boolean: true = field set
	*/
	public function setModels(){
		//set texts
		$requete = "UPDATE ".PREFIX_DB.self::TABLE;
		$requete .= " SET tsubject='".$subject."', tbody='".$body."'";
		$requete .= " WHERE tref='".$ref."' AND tlang='".$lang."'";

		$result = $this->db->exec($requete);
		// Vérification des erreurs
		self::chekError($result);
	}
	/**
	* Ref List
	* @return array: list of conditions used by models
	*/
	public function getConds($lang){
			$requete = "SELECT tref,tcomment FROM ".PREFIX_DB.self::TABLE." WHERE tlang='".$lang."'";
			$result = $this->db->query($requete);
			// Vérification des erreurs
		   self::chekError($result);
			if(!$this->is_error && $result->numRows()>0){
				$refs = $result->fetchAll(MDB2_FETCHMODE_ASSOC);
			}
	return $refs;
	}
	/**
	* Import XML files generated by PanCake
	* @param string: Reference of file to read
	* @return boolean: status of read operation
	*/
	public function readXMLModels($file){
	return ;
	}
	/**
	* Export filed names for model constructor PanCake
	* @param string: Reference of model to write
	* @return boolean: status of write operation
	*/
	public function writeFields($model){
	// All fields from table adherents
	$requete = "DESC ".PREFIX_DB.self::ADH;
	$result = $this->db->query($requete);
	// Vérification des erreurs
   self::chekError($result);
	if(!$this->is_error && $result->numRows()>0){
		$fields_adh = $result->fetchAll(MDB2_FETCHMODE_ASSOC);
	}
// Add dynamic fields related to adherents
	$requete = "SELECT field_name,field_size from ".PREFIX_DB.self::FIELDS." WHERE field_form = 'adh'";
	$result = $this->db->query($requete);
	// Vérification des erreurs
   self::chekError($result);
	if(!$this->is_error && $result->numRows()>0){
		$fields_adh = $result->fetchAll(MDB2_FETCHMODE_ASSOC);
	}
	return ;
	}
}
?>